name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Matches tags like v1.0.0, v2.1.3, etc.

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.22'

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install Tailwind CSS and DaisyUI
        run: |
          npm install -g tailwindcss daisyui@latest

      - name: Generate Tailwind CSS
        run: npx tailwindcss -i ./cmd/web/assets/css/input.css -o ./cmd/web/assets/css/tailwind.css --minify

      - name: Install templ
        run: go install github.com/a-h/templ/cmd/templ@latest

      - name: Generate templates
        run: templ generate

      - name: Build for ${{ matrix.goos }}-${{ matrix.goarch }}
        run: |
          VERSION=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="-s -w" -o piggy-planner_${{ matrix.goos }}_${{ matrix.goarch }}_${VERSION} cmd/api/main.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: piggy-planner_${{ matrix.goos }}_${{ matrix.goarch }}_${{ github.ref }}
          path: piggy-planner_${{ matrix.goos }}_${{ matrix.goarch }}_${{ github.ref }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: piggy-planner_*
          asset_name: piggy-planner_${{ matrix.goos }}_${{ matrix.goarch }}_${{ github.ref }}
          asset_content_type: application/octet-stream